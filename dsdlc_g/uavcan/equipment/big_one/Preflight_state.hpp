/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /cygdrive/c/dev/uavcan_node/libuavcan/dsdl/uavcan/equipment/big_one/1015.Preflight_state.uavcan
 */

#ifndef UAVCAN_EQUIPMENT_BIG_ONE_PREFLIGHT_STATE_HPP_INCLUDED
#define UAVCAN_EQUIPMENT_BIG_ONE_PREFLIGHT_STATE_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
#
# This message represents the system preflight status.
#

uint8 PREFLIGHT_ON 	= 0
uint8 PREFLIGHT_OFF     = 255

uint8 status
******************************************************************************/

/********************* DSDL signature source definition ***********************
uavcan.equipment.big_one.Preflight_state
saturated uint8 status
******************************************************************************/

#undef status
#undef PREFLIGHT_ON
#undef PREFLIGHT_OFF

namespace uavcan
{
namespace equipment
{
namespace big_one
{

template <int _tmpl>
struct UAVCAN_EXPORT Preflight_state_
{
    typedef const Preflight_state_<_tmpl>& ParameterType;
    typedef Preflight_state_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > PREFLIGHT_ON;
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > PREFLIGHT_OFF;
    };

    struct FieldTypes
    {
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > status;
    };

    enum
    {
        MinBitLen
            = FieldTypes::status::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::status::MaxBitLen
    };

    // Constants
    static const typename ::uavcan::StorageType< typename ConstantTypes::PREFLIGHT_ON >::Type PREFLIGHT_ON; // 0
    static const typename ::uavcan::StorageType< typename ConstantTypes::PREFLIGHT_OFF >::Type PREFLIGHT_OFF; // 255

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::status >::Type status;

    Preflight_state_()
        : status()
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<8 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    enum { DefaultDataTypeID = 1015 };

    static const char* getDataTypeFullName()
    {
        return "uavcan.equipment.big_one.Preflight_state";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool Preflight_state_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        status == rhs.status;
}

template <int _tmpl>
bool Preflight_state_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(status, rhs.status);
}

template <int _tmpl>
int Preflight_state_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::status::encode(self.status, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int Preflight_state_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::status::decode(self.status, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature Preflight_state_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0xF2946091576C1920ULL);

    FieldTypes::status::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

template <int _tmpl>
const typename ::uavcan::StorageType< typename Preflight_state_<_tmpl>::ConstantTypes::PREFLIGHT_ON >::Type
    Preflight_state_<_tmpl>::PREFLIGHT_ON = 0U; // 0

template <int _tmpl>
const typename ::uavcan::StorageType< typename Preflight_state_<_tmpl>::ConstantTypes::PREFLIGHT_OFF >::Type
    Preflight_state_<_tmpl>::PREFLIGHT_OFF = 255U; // 255

/*
 * Final typedef
 */
typedef Preflight_state_<0> Preflight_state;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::uavcan::equipment::big_one::Preflight_state > _uavcan_gdtr_registrator_Preflight_state;

}

} // Namespace big_one
} // Namespace equipment
} // Namespace uavcan

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::uavcan::equipment::big_one::Preflight_state >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::uavcan::equipment::big_one::Preflight_state::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::uavcan::equipment::big_one::Preflight_state >::stream(Stream& s, ::uavcan::equipment::big_one::Preflight_state::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "status: ";
    YamlStreamer< ::uavcan::equipment::big_one::Preflight_state::FieldTypes::status >::stream(s, obj.status, level + 1);
}

}

namespace uavcan
{
namespace equipment
{
namespace big_one
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::uavcan::equipment::big_one::Preflight_state::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::uavcan::equipment::big_one::Preflight_state >::stream(s, obj, 0);
    return s;
}

} // Namespace big_one
} // Namespace equipment
} // Namespace uavcan

#endif // UAVCAN_EQUIPMENT_BIG_ONE_PREFLIGHT_STATE_HPP_INCLUDED